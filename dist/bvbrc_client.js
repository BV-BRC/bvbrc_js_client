!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).BVBRCClient=e()}}((function(){var e={},t=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t)return t;throw new Error("unable to locate global object")}();e=e=t.fetch,t.fetch&&(e.default=t.fetch.bind(t)),e.Headers=t.Headers,e.Request=t.Request,e.Response=t.Response;var n={};n.NotFound=class extends Error{constructor(e){super(e),this.name="NotFound"}},n.InvalidDataType=class extends Error{constructor(e){super(e),this.name="InvalidDataType"}},n.InvalidQueryLanguage=class extends Error{constructor(e){super(e),this.name="InvalidQueryLanguage"}},n.ClientNotInitialized=class extends Error{constructor(e){super(e),this.name="ClientNotInitialized"}};return class{constructor(e,t){this.initialized=!1,e&&this.init(e,t),this.dataTypes=["antibiotics","encyme_class_ref","feature_sequence","gene_ontology_ref","genome","genome_amr","genome_feature","genome_sequence","id_ref","misc_niaid_sgc","model_complex_role","model_compound","model_reaction","model_template_biomass","model_template_reaction","pathway","pathway_ref","ppi","protein_family_ref","sp_gene","sp_gene_evidence","sp_gene_ref","subsystem","subsystem_ref","taxonomy","transcriptomics_experiment","transcriptomics_gene","transcriptomics_sample"]}checkInitialization(){if(!this.initialized)throw new n.ClientNotInitialized}init(e,t){if(!e)throw Error("Must provide endpont to initialize client");"/"===e.charAt(e.length-1)?this.endpoint=e.substring(0,e.length-1):this.endpoint=e,this.token=t,this.initialized=!0}async get(t,i){if(this.checkInitialization(),this.dataTypes.indexOf(t)<0)throw new n.InvalidDataType("Invalid Data Type: "+t);var r={headers:{accept:"application/json",authorization:this.token||""}};const s=await e(`${this.endpoint}/${t}/${encodeURIComponent(i)}`,r);if(!s.ok){if(404===s.status)throw new n.NotFound(`${t} ${i} not found`);throw Error(`${s.status} ${s.statusText}`)}return s.json()}async query(t,i,r={}){if(this.checkInitialization(),this.dataTypes.indexOf(t)<0)throw Error("Invalid Data Type");var s,a={method:"POST",headers:{accept:r.accept||"application/json",authorization:this.token||""}};if(r.query_lang=r.query_lang||"rql",["rql","solr"].indexOf(r.query_lang)<0)throw n.InvalidQueryLanguage(r.query_lang+" is not a valid query lang. Must be 'rql' or 'solr'");switch(r.query_lang){case"solr":a.headers["content-type"]="application/solrquery+x-www-form-urlencoded",s="q="+i,r.limit&&(s=`${s}&rows=${r.limit}&start=${r.start||0}`),r.select&&(s=`${s}&fl=${r.select.join(",")}`);break;case"rql":default:a.headers["content-type"]="application/rqlquery+x-www-form-urlencoded",s=i,r.limit&&(s=`${s}&limit(${r.limit},${r.start||0})`),r.select&&(s=`${s}&select(${r.select.join(",")})`)}var o=`${this.endpoint}/${t}/`;s.length<2e3?(a.method="GET",o=`${o}?${s}`):a.body=s;var u=await e(o,a);if(!u.ok)throw Error(""+u.statusText);var c=u.headers.get("content-range").split(" ")[1].split("/"),l=parseInt(c[1]),d={start:parseInt(c[0].split("-")[0]),total_items:l};return new class{constructor(e,t={}){this.items=e,this.start=t.start||0,this.total_items=t.total_items||this.length}}(await u.json(),d)}async getSchema(t){if(this.checkInitialization(),this.dataTypes.indexOf(t)<0)throw Error("Invalid Data Type");return e(`${this.endpoint}/${t}/schema`,{method:"GET",headers:{accept:"application/json"}}).then(e=>{if(!e.ok)throw Error(""+e.statusText);return e.json()})}async getGenome(e){return await this.get("genome",e)}async queryGenomes(e,t={}){return await this.query("genome",e,t)}async getGenomeFeature(e){return await this.get("genome_feature",e)}async getGenomeFeatures(e,t={}){return e instanceof Array||(e=[e]),this.queryGenomeFeatures(`in(genome_id,(${e.join(",")}))`,t)}async getGenomeFeaturesByQuery(e,t="",i={}){if(i.query_lang&&"rql"!=i.query_lang)throw n.InvalidQueryLanguage("getGenomeFeaturesByQuery currently only works with RQL queries and filters");var r=`in(genome_id,(${(await this.queryGenomes(e,{select:["genome_id"],limit:i.genome_limit||500})).items.map(e=>e.genome_id)}))`;return t&&(r=`${r}&${t}`),this.queryGenomeFeatures(r,i)}async queryGenomeFeatures(e,t={}){return await this.query("genome_feature",e,t)}async getGenomeSequence(e){return await this.get("genome_sequence",e)}async getGenomeSequences(e,t={}){return e instanceof Array||(e=[e]),this.queryGenomeSequences(`in(genome_id,(${e.join(",")}))`,t)}async queryGenomeSequences(e,t={}){return await this.query("genome_sequence",e,t)}async getSpecialtyGene(e){return await this.get("sp_gene",e)}async querySpecialtyGene(e,t={}){return await this.query("sp_gene",e,t)}async getAntibiotic(e){return await this.get("antibiotic",e)}async queryAntibiotics(e,t={}){return await this.query("antibiotic",e,t)}async setGenomePermissions(t,n){if(this.checkInitialization(),!this.token)throw new Error("Missing token.  Authorization required for setGenomePermissions");if(!t||!n)throw new Error("setGenomePermission expects id and permissions");var i=n.map((function(e){return{user:e.user,permission:this.permMapping(e.permission)}}),this);t=Array.isArray(t)?t:[t],JSON.stringify(i),this.token;var r=await e(`${this.endpoint}/permissions/genome/${t.join(",")}`,req_options);if(!r.ok)throw Error(""+r.statusText);return await r.json()}permMapping(e){return{"Can view":"read","Can edit":"write",Varies:"unchanged",r:"read",w:"write"}[e]}solrPermsToObjs(e){var t=[];return e.forEach((function(e){var n=e.user_read||[],i=e.user_write||[],r=i.map((function(e){return{user:e,perm:"Can edit"}})),s=n.filter((function(e){return-1==i.indexOf(e)})).map((function(e){return{user:e,perm:"Can view"}})).concat(r);t.push(s)})),t.reduce((function(e,t){return e.concat(t)}),[])}}}));