!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).BVBRCClient=e()}}((function(){var e={},t=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t)return t;throw new Error("unable to locate global object")}();e=e=t.fetch,t.fetch&&(e.default=t.fetch.bind(t)),e.Headers=t.Headers,e.Request=t.Request,e.Response=t.Response;var n={};n.NotFound=class extends Error{constructor(e){super(e),this.name="NotFound"}},n.InvalidDataType=class extends Error{constructor(e){super(e),this.name="InvalidDataType"}},n.InvalidQueryLanguage=class extends Error{constructor(e){super(e),this.name="InvalidQueryLanguage"}};return class{constructor(e,t){this.endpoint=e,this.token=t||!1,this.dataTypes=["antibiotics","encyme_class_ref","feature_sequence","gene_ontology_ref","genome","genome_amr","genome_feature","genome_sequence","id_ref","misc_niaid_sgc","model_complex_role","model_compound","model_reaction","model_template_biomass","model_template_reaction","pathway","pathway_ref","ppi","protein_family_ref","sp_gene","sp_gene_evidence","sp_gene_ref","subsystem","subsystem_ref","taxonomy","transcriptomics_experiment","transcriptomics_gene","transcriptomics_sample"]}async get(t,r){if(this.dataTypes.indexOf(t)<0)throw new n.InvalidDataType("Invalid Data Type: "+t);var a={headers:{accept:"application/json",authorization:this.token||""}};const s=await e(`${this.endpoint}/${t}/${r}`,a);if(!s.ok){if(404===s.status)throw new n.NotFound(`${t} ${r} not found`);throw Error(`${s.status} ${s.statusText}`)}return s.json()}async query(t,r,a={}){if(this.dataTypes.indexOf(t)<0)throw Error("Invalid Data Type");var s,o={method:"POST",headers:{accept:a.accept||"application/json",authorization:this.token||""}};if(a.query_lang=a.query_lang||"rql",["rql","solr"].indexOf(a.query_lang)<0)throw n.InvalidQueryLanguage(a.query_lang+" is not a valid query lang. Must be 'rql' or 'solr'");switch(a.query_lang){case"solr":o.headers["content-type"]="application/solrquery+x-www-form-urlencoded",s="q="+r,a.limit&&(s=`${s}&rows=${a.limit}&start=${a.start||0}`),a.select&&(bod=`${s}&fl=${a.select.join(",")}`);break;case"rql":default:o.headers["content-type"]="application/rqlquery+x-www-form-urlencoded",s=r,a.limit&&(s=`${s}&limit(${a.limit},${a.start||0})`),a.select&&(bod=`${s}&select(${a.select.join(",")})`)}o.body=s;var i=await e(`${this.endpoint}/${t}/`,o);if(!i.ok)throw Error(""+i.statusText);var u=i.headers.get("content-range").split(" ")[1].split("/"),l=parseInt(u[1]),c={start:parseInt(u[0].split("-")[0]),total_items:l};return new class{constructor(e,t={}){this.items=e,this.start=t.start||0,this.total_items=t.total_items||this.length}}(await i.json(),c)}async getSchema(t){if(this.dataTypes.indexOf(t)<0)throw Error("Invalid Data Type");return e(`${this.endpoint}/${t}/schema`,{method:"GET",headers:{accept:"application/json"}}).then(e=>{if(!e.ok)throw Error(""+e.statusText);return e.json()})}async getGenome(e){return await this.get("genome",e)}async queryGenomes(e,t={}){return await this.query("genome",e,t)}async getGenomeFeature(e){return await this.get("genome_feature",e)}async getGenomeFeatures(e,t={}){return e instanceof Array||(e=[e]),this.queryGenomeFeatures(`in(genome_id,(${e.join(",")}))`,t)}async getGenomeFeaturesByQuery(e,t="",r={}){if(r.query_lang&&"rql"!=r.query_lang)throw n.InvalidQueryLanguage("getGenomeFeaturesByQuery currently only works with RQL queries and filters");var a=`in(genome_id,(${(await this.queryGenomes(e,{select:["genome_id"],limit:r.genome_limit||500})).items.map(e=>e.genome_id)}))`;return t&&(a=`${a}&${t}`),this.queryGenomeFeatures(a,r)}async queryGenomeFeatures(e,t={}){return await this.query("genome_feature",e,t)}async getGenomeSequence(e){return await this.get("genome_sequence",e)}async getGenomeSequences(e,t={}){return e instanceof Array||(e=[e]),this.queryGenomeSequences(`in(genome_id,(${e.join(",")}))`,t)}async queryGenomeSequences(e,t={}){return await this.query("genome_sequence",e,t)}async getSpecialtyGene(e){return await this.get("sp_gene",e)}async querySpecialtyGene(e,t={}){return await this.query("sp_gene",e,t)}}}));