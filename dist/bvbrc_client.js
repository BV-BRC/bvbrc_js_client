!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).BVBRCClient=e()}}((function(){var e={},t=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t)return t;throw new Error("unable to locate global object")}();e=e=t.fetch,t.fetch&&(e.default=t.fetch.bind(t)),e.Headers=t.Headers,e.Request=t.Request,e.Response=t.Response;var n={};n.NotFound=class extends Error{constructor(e){super(e),this.name="NotFound"}},n.InvalidDataType=class extends Error{constructor(e){super(e),this.name="InvalidDataType"}},n.InvalidQueryLanguage=class extends Error{constructor(e){super(e),this.name="InvalidQueryLanguage"}},n.ClientNotInitialized=class extends Error{constructor(e){super(e),this.name="ClientNotInitialized"}};return class{constructor(e,t){this.initialized=!1,e&&this.init(e,t),this.dataTypes=["antibiotics","feature_sequence","gene_ontology_ref","genome","genome_amr","genome_feature","genome_sequence","id_ref","misc_niaid_sgc","pathway","pathway_ref","ppi","protein_family_ref","sp_gene","sp_gene_evidence","sp_gene_ref","subsystem","subsystem_ref","taxonomy","transcriptomics_experiment","transcriptomics_gene","transcriptomics_sample"]}checkInitialization(){if(!this.initialized)throw new n.ClientNotInitialized}init(e,t){if(!e)throw Error("Must provide endpont to initialize client");"/"===e.charAt(e.length-1)?this.endpoint=e.substring(0,e.length-1):this.endpoint=e,this.token=t,this.initialized=!0}async get(t,r){if(this.checkInitialization(),this.dataTypes.indexOf(t)<0)throw new n.InvalidDataType("Invalid Data Type: "+t);var i={headers:{accept:"application/json",authorization:this.token||""}};const a=await e(`${this.endpoint}/${t}/${encodeURIComponent(r)}`,i);if(!a.ok){if(404===a.status)throw new n.NotFound(`${t} ${r} not found`);throw Error(`${a.status} ${a.statusText}`)}return a.json()}async query(t,r,i={}){if(this.checkInitialization(),this.dataTypes.indexOf(t)<0)throw Error("Invalid Data Type");var a,s={method:"POST",headers:{accept:i.accept||"application/json",authorization:this.token||""}};if(i.query_lang=i.query_lang||"rql",["rql","solr"].indexOf(i.query_lang)<0)throw n.InvalidQueryLanguage(i.query_lang+" is not a valid query lang. Must be 'rql' or 'solr'");switch(i.query_lang){case"solr":s.headers["content-type"]="application/solrquery+x-www-form-urlencoded",a="q="+r,i.limit&&(a=`${a}&rows=${i.limit}&start=${i.start||0}`),i.select&&(a=`${a}&fl=${i.select.join(",")}`);break;case"rql":default:s.headers["content-type"]="application/rqlquery+x-www-form-urlencoded",a=r,i.limit&&(a=`${a}&limit(${i.limit},${i.start||0})`),i.select&&(a=`${a}&select(${i.select.join(",")})`)}var o=`${this.endpoint}/${t}/`;a.length<2e3?(s.method="GET",o=`${o}?${a}`):s.body=a;var u=await e(o,s);if(!u.ok)throw Error(""+u.statusText);switch(s.headers.accept){case"application/solr+json":return await u.json();case"application/json":var c=u.headers.get("content-range").split(" ")[1].split("/"),y=parseInt(c[1]),h={start:parseInt(c[0].split("-")[0]),total_items:y};return new class{constructor(e,t={}){this.items=e,this.start=t.start||0,this.total_items=t.total_items||this.length}}(await u.json(),h);default:return await u.text()}}async getSchema(t){if(this.checkInitialization(),this.dataTypes.indexOf(t)<0)throw Error("Invalid Data Type");return e(`${this.endpoint}/${t}/schema`,{method:"GET",headers:{accept:"application/json"}}).then(e=>{if(!e.ok)throw Error(""+e.statusText);return e.json()})}async getGenome(e){return await this.get("genome",e)}async queryGenomes(e,t={}){return await this.query("genome",e,t)}async getGenomeFeature(e){return await this.get("genome_feature",e)}async getGenomeFeatures(e,t={}){return e instanceof Array||(e=[e]),this.queryGenomeFeatures(`in(genome_id,(${e.join(",")}))`,t)}async getGenomeFeaturesByQuery(e,t="",r={}){if(r.query_lang&&"rql"!=r.query_lang)throw n.InvalidQueryLanguage("getGenomeFeaturesByQuery currently only works with RQL queries and filters");var i=`in(genome_id,(${(await this.queryGenomes(e,{select:["genome_id"],limit:r.genome_limit||500})).items.map(e=>e.genome_id)}))`;return t&&(i=`${i}&${t}`),this.queryGenomeFeatures(i,r)}async queryGenomeFeatures(e,t={}){return await this.query("genome_feature",e,t)}async getGenomeSequence(e){return await this.get("genome_sequence",e)}async getGenomeSequences(e,t={}){return e instanceof Array||(e=[e]),this.queryGenomeSequences(`in(genome_id,(${e.join(",")}))`,t)}async getFeatureSequence(e){return await this.get("feature_sequence",e)}async queryFeatureSequences(e,t={}){return await this.query("feature_sequence",e,t)}async getGeneOntologyRef(e){return await this.get("gene_ontology_ref",e)}async queryGeneOntologyRefs(e,t={}){return await this.query("gene_ontology_ref",e,t)}async queryGenomeSequences(e,t={}){return await this.query("genome_sequence",e,t)}async getSpecialtyGene(e){return await this.get("sp_gene",e)}async querySpecialtyGenes(e,t={}){return await this.query("sp_gene",e,t)}async getAntibiotic(e){return await this.get("antibiotics",e)}async queryAntibiotics(e,t={}){return await this.query("antibiotics",e,t)}async getGenomeAMR(e){return await this.get("genome_amr",e)}async queryGenomeAMRs(e,t={}){return await this.query("genome_amr",e,t)}async getIDRef(e){return await this.get("id_ref",e)}async queryIDRefs(e,t={}){return await this.query("id_ref",e,t)}async getMiscNIAIDSGC(e){return await this.get("misc_niaid_sgc",e)}async queryMiscNIAIDSGCs(e,t={}){return await this.query("misc_niaid_sgc",e,t)}async getPathway(e){return await this.get("pathway",e)}async queryPathways(e,t={}){return await this.query("pathway",e,t)}async getPathwayRef(e){return await this.get("pathway_ref",e)}async queryPathwayRefs(e,t={}){return await this.query("pathway_ref",e,t)}async getPPI(e){return await this.get("ppi",e)}async queryPPIs(e,t={}){return await this.query("ppi",e,t)}async getProteinFamilyRef(e){return await this.get("protein_family_ref",e)}async queryProteinFamilyRefs(e,t={}){return await this.query("protein_family_ref",e,t)}async getSpecialtyGeneEvidence(e){return await this.get("sp_gene_evidence",e)}async querySpecialtyGeneEvidences(e,t={}){return await this.query("sp_gene_evidence",e,t)}async getSpecialtyGeneRef(e){return await this.get("sp_gene_ref",e)}async querySpecialtyGeneRefs(e,t={}){return await this.query("sp_gene_ref",e,t)}async getSubsystem(e){return await this.get("subsystem",e)}async querySubsystems(e,t={}){return await this.query("subsystem",e,t)}async getSubsystemRef(e){return await this.get("subsystem_ref",e)}async querySubsystemRefs(e,t={}){return await this.query("subsystem_ref",e,t)}async getTaxonomy(e){return await this.get("taxonomy",e)}async queryTaxonomys(e,t={}){return await this.query("taxonomy",e,t)}async getTranscriptomicsExperiment(e){return await this.get("transcriptomics_experiment",e)}async queryTranscriptomicsExperiments(e,t={}){return await this.query("transcriptomics_experiment",e,t)}async getTranscriptomicsGene(e){return await this.get("transcriptomics_gene",e)}async queryTranscriptomicsGenes(e,t={}){return await this.query("transcriptomics_gene",e,t)}async getTranscriptomicsSample(e){return await this.get("transcriptomics_sample",e)}async queryTranscriptomicsSamples(e,t={}){return await this.query("transcriptomics_sample",e,t)}async setGenomePermissions(t,n){if(this.checkInitialization(),!this.token)throw new Error("Missing token.  Authorization required for setGenomePermissions");if(!t||!n)throw new Error("setGenomePermission expects id and permissions");var r=n.map((function(e){return{user:e.user,permission:this.permMapping(e.permission)}}),this);t=Array.isArray(t)?t:[t];const i={method:"POST",headers:{"content-type":"application/json",accept:"application/json",Authorization:this.token},body:JSON.stringify(r)};var a=await e(`${this.endpoint}/permissions/genome/${t.join(",")}`,i);if(!a.ok)throw Error(""+a.statusText);return await a.json()}permMapping(e){return{"Can view":"read","Can edit":"write",Varies:"unchanged",r:"read",w:"write"}[e]}solrPermsToObjs(e){var t=[];return e.forEach((function(e){var n=e.user_read||[],r=e.user_write||[],i=r.map((function(e){return{user:e,perm:"Can edit"}})),a=n.filter((function(e){return-1==r.indexOf(e)})).map((function(e){return{user:e,perm:"Can view"}})).concat(i);t.push(a)})),t.reduce((function(e,t){return e.concat(t)}),[])}}}));